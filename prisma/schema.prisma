generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?        @unique
  emailVerified         DateTime?
  password              String?
  resetToken            String?
  resetTokenExpiry      DateTime?
  image                 String?
  role                  Int            @default(0) // 0 = default, 1 = employee, 2 = admin
  accounts              Account[]
  sessions              Session[]
  createdConversations  Conversation[] @relation("CreatedConversations")
  assignedConversations Conversation[] @relation("AssignedConversations")
  messages              Message[]
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String?
  type          String         @default("project")
  status        String         @default("scoping")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdBy     User           @relation("CreatedConversations", fields: [createdById], references: [id])
  createdById   String         @db.ObjectId
  assignedTo    User?          @relation("AssignedConversations", fields: [assignedToId], references: [id])
  assignedToId  String?        @db.ObjectId
  messages      Message[]
  questionnaire Questionnaire?
}

model Questionnaire {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  conversation      Conversation @relation(fields: [conversationId], references: [id])
  conversationId    String       @unique @db.ObjectId
  answers           String?
  results           String?
  selectedEntities  String?
  selectedDocuments String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  createdAt      DateTime     @default(now())
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.ObjectId
  isRead         Boolean      @default(false)
}
